@page "/Manage/Workspace"
@using Common.Services
@inject WorkspaceService WorkspaceService
@inject RoomService RoomService

<PageTitle>Workspaces</PageTitle>

<h1>Workspaces</h1>

<button @onclick="NewWorkspace" class="btn btn-dark">New Workspace</button>
@if (CurrentWorkspace is not null)
{
    <EditForm Model="CurrentWorkspace" OnValidSubmit="HandleSubmit" class="position-fixed card p-3 shadow">
        <div class="mb-3 row g-3 align-items-center">
            <div class="col-auto">
                <label for="desk_name" class="col-form-label">Desk name:</label>
            </div>
            <div class="col-auto">
                <InputText class="form-control" id="desk_name" @bind-Value="CurrentWorkspace!.DeskName"/>
            </div>
        </div>
        <div class="mb-3 row g-3 align-items-center">
            <div class="col-auto">
                <label for="room" class="col-form-label">Room:</label>
            </div>
            <div class="col-auto">
                <InputSelect class="form-select" id="room" @bind-Value="CurrentWorkspace.RoomId">
                    <option selected hidden>Select an option</option>
                    @foreach (var room in Rooms)
                    {
                        @if (CurrentWorkspace.RoomId == room.Id)
                        {
                            <option selected value="@room.Id">@room.RoomCode @(!string.IsNullOrEmpty(room.Name) ? $"- {room.Name}" : "")</option>
                        }
                        else
                        {
                            <option value="@room.Id">@room.RoomCode @(!string.IsNullOrEmpty(room.Name) ? $"- {room.Name}" : "")</option>
                        }
                    }
                </InputSelect>
            </div>
        </div>
        <div class="row g-3 align-items-center">
            <div class="col-auto">
                <button type="submit" class="btn btn-success">Save</button>
            </div>
            <div class="col-auto">
                <button type="button" class="btn btn-outline-secondary" @onclick="() => CurrentWorkspace = null">Cancel</button>
            </div>
        </div>
    </EditForm>
}
<div class="d-flex flex-wrap gap-5">

    @foreach (var workspace in Workspaces)
    {
        <div>
            <div @onclick="() => CurrentWorkspace = workspace" style="cursor: pointer;">
                <div class="title">
                    <h5>@workspace.DeskName</h5>
                </div>
                @workspace.Room.RoomCode
            </div>
            <button class="btn btn-danger" @onclick="() => DeleteWorkspace(workspace.Id)">Delete</button>
        </div>
    }
</div>

@code {
    private List<Common.Models.Workspace> Workspaces { get; set; } = [];
    private List<Room> Rooms { get; set; } = [];
    private Common.Models.Workspace? CurrentWorkspace { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Workspaces = (await WorkspaceService.GetAllWorkspacesAsync()).ToList();
    }

    private async Task NewWorkspace()
    {
        CurrentWorkspace = new Common.Models.Workspace();
        Rooms = (await RoomService.GetAllRoomsAsync()).OrderBy(r => r.RoomCode).ToList();
    }

    private async Task HandleSubmit()
    {
        if (CurrentWorkspace == null) return;
        if (await WorkspaceService.UpdateWorkspaceAsync(CurrentWorkspace) == null)
            await WorkspaceService.CreateWorkspaceAsync(CurrentWorkspace);
        await OnInitializedAsync();
        CurrentWorkspace = null;
    }

    private async Task DeleteWorkspace(Guid id)
    {
        await WorkspaceService.DeleteWorkspaceAsync(id);
        await OnInitializedAsync();
    }

}