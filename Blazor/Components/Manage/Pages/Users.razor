@page "/Manage/Users"
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject UserManager<User> UserManager

<h3>Users</h3>

<div>
    <input @bind="SearchTerm" placeholder="Search users..." @oninput="OnSearchTermChanged" />
</div>

<table class="table table-striped">
    <thead>
    <tr>
        <th>E-mail</th>
        <th>Actions</th>
    </tr>
    </thead>
    <tbody>
    @if (FilteredUsers.Any())
    {
        @foreach (var user in FilteredUsers)
        {
            <UserRow CurrentUser="user" OnUserDeleted="HandleUserDeleted" />
        }
    }
    else
    {
        <tr>
            <td colspan="2">No users found</td>
        </tr>
    }
    </tbody>
</table>

@code {
    private List<User> UserList { get; set; } = new List<User>();
    private string SearchTerm { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        try
        {
            UserList = await UserManager.Users.ToListAsync();
        }
        catch (Exception ex)
        {
            // Handle exceptions (e.g., logging)
            Console.Error.WriteLine($"Error loading users: {ex.Message}");
        }
    }

    private IEnumerable<User> FilteredUsers => UserList
        .Where(u => string.IsNullOrWhiteSpace(SearchTerm) || u.Email.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase));

    private async Task HandleUserDeleted(User user)
    {
        await LoadUsers();
        SearchTerm = string.Empty;
        StateHasChanged();
    }

    private void OnSearchTermChanged(ChangeEventArgs e)
    {
        SearchTerm = e.Value?.ToString() ?? string.Empty;
        StateHasChanged();
    }
}