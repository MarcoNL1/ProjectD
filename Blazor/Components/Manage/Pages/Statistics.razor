@page "/Manage/Statistics"
@using ChartJs.Blazor.BarChart
@using ChartJs.Blazor.BarChart.Axes
@using ChartJs.Blazor.Util
@using ChartJs.Blazor.Common
@using ChartJs.Blazor.Common.Axes
@using ChartJs.Blazor.Common.Axes.Ticks
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject ReservationService ReservationService
@inject RoomService RoomService
@inject UserManager<User> UserManager

<PageTitle>Statistics</PageTitle>

<div>
    <h1>Statistics Page</h1>
    <div class="row g-3 row-cols-1 row-cols-lg-2">
        <div class="col-auto">
            <h3>Total Reservations for Today and Tomorrow</h3>
            <Chart Config="_config"></Chart>
        </div>

        <div class="col-auto">
            <h3>Floor-wise Reservations for Today and Tomorrow</h3>
            <Chart Config="_floorReservationConfig"></Chart>
        </div>

        <div class="col-auto">
            <h3>Wing-wise Reservations for Today and Tomorrow</h3>
            <Chart Config="_wingReservationConfig"></Chart>
        </div>

        <div>
            <h3>Active Floors</h3>
            @if (activeFloors.Any())
            {
                @foreach (var floor in activeFloors)
                {
                    <div>
                        <p>Floor: @floor.FloorNumber</p>
                        <ul>
                            @foreach (var roomNumber in floor.RoomNumbers.Order())
                            {
                                <li>Room: @roomNumber</li>
                            }
                        </ul>
                    </div>
                }
            }
            else
            {
                <p>No active floors right now</p>
            }
        </div>
    </div>

    <h3>All Time Reservation Count</h3>

    <div>
        <label>Select Table:</label>
        <select @bind="SelectedTable">
            <option value="Rooms">Rooms</option>
            <option value="Wings">Wings</option>
            <option value="Floors">Floors</option>
            <option value="Users">Users</option>
        </select>
    </div>

    <div>
        @if (SelectedTable == "Rooms")
        {
            <div>
                <button @onclick="ToggleFilterMenu">Toggle Filter Menu</button>
            </div>
            @if (ShowFilterMenu)
            {
                <div>
                    <label>Filter by Floor Number:</label>
                    <input type="number" @bind="FilterFloorNumber"/>
                    <label>Filter by Wing:</label>
                    <input type="text" @bind="FilterWing" maxlength="1"/>
                    <label>Filter by Room Number:</label>
                    <input type="number" @bind="FilterRoomNumber"/>
                    <button @onclick="ApplyFilters">Filter</button>
                    <button @onclick="ClearFilters">Clear Filters</button>
                </div>
            }

            <table class="table">
                <thead>
                <tr>
                    <th>Room Code</th>
                    <th @onclick="ToggleCountOrder">
                        Reservation Count
                        @if (CountDescending)
                        {
                            <span>&darr;</span>
                        }
                        else
                        {
                            <span>&uarr;</span>
                        }
                    </th>
                </tr>
                </thead>
                <tbody>
                @if (CountDescending)
                {
                    @foreach (var room in FilteredRooms.OrderByDescending(r => r.Reservations.Count).ThenBy(r => r.FloorNumber).ThenBy(r => r.RoomNumber))
                    {
                        <tr>
                            <td>@room.RoomCode</td>
                            <td>@room.Reservations.Count</td>
                        </tr>
                    }
                }
                @if (!CountDescending)
                {
                    @foreach (var room in FilteredRooms.OrderBy(r => r.Reservations.Count).ThenBy(r => r.FloorNumber).ThenBy(r => r.RoomNumber))
                    {
                        <tr>
                            <td>@room.RoomCode</td>
                            <td>@room.Reservations.Count</td>
                        </tr>
                    }
                }
                </tbody>
            </table>
        }

        @if (SelectedTable == "Wings")
        {
            <table class="table">
                <thead>
                <tr>
                    <th>Wing</th>
                    <th @onclick="ToggleCountOrder">
                        Reservation Count
                        @if (CountDescending)
                        {
                            <span>&darr;</span>
                        }
                        else
                        {
                            <span>&uarr;</span>
                        }
                    </th>
                </tr>
                </thead>
                <tbody>
                @if (CountDescending)
                {
                    @foreach (var wingCount in WingCounts.OrderByDescending(r => r.Count))
                    {
                        <tr>
                            <td>@wingCount.Wing</td>
                            <td>@wingCount.Count</td>
                        </tr>
                    }
                }
                @if (!CountDescending)
                {
                    @foreach (var wingCount in WingCounts.OrderBy(r => r.Count))
                    {
                        <tr>
                            <td>@wingCount.Wing</td>
                            <td>@wingCount.Count</td>
                        </tr>
                    }
                }
                </tbody>
            </table>
        }

        @if (SelectedTable == "Floors")
        {
            <table class="table">
                <thead>
                <tr>
                    <th>Floor Number</th>
                    <th @onclick="ToggleCountOrder">
                        Reservation Count
                        @if (CountDescending)
                        {
                            <span>&darr;</span>
                        }
                        else
                        {
                            <span>&uarr;</span>
                        }
                    </th>
                </tr>
                </thead>
                <tbody>
                @if (CountDescending)
                {
                    @foreach (var floorCount in FloorCounts.OrderByDescending(r => r.Count))
                    {
                        <tr>
                            <td>@floorCount.FloorNumber</td>
                            <td>@floorCount.Count</td>
                        </tr>
                    }
                }
                @if (!CountDescending)
                {
                    @foreach (var floorCount in FloorCounts.OrderBy(r => r.Count))
                    {
                        <tr>
                            <td>@floorCount.FloorNumber</td>
                            <td>@floorCount.Count</td>
                        </tr>
                    }
                }
                </tbody>
            </table>
        }

        @if (SelectedTable == "Users")
        {
            <div>
                <label>Search Username:</label>
                <input type="text" @bind="UserSearchTerm" @oninput="ApplyUserFilter"/>
                <button @onclick="ClearUserFilters">Clear Filters</button>
            </div>
            <table class="table">
                <thead>
                <tr>
                    <th>Email</th>
                    <th @onclick="ToggleCountOrder">
                        Reservation Count
                        @if (CountDescending)
                        {
                            <span>&darr;</span>
                        }
                        else
                        {
                            <span>&uarr;</span>
                        }
                    </th>
                </tr>
                </thead>
                <tbody>
                @if (CountDescending)
                {
                    @foreach (var user in FilteredUsers.OrderByDescending(u => u.Reservations.Count()).ThenBy(u => u.UserName))
                    {
                        <tr>
                            <td>@user.Email</td>
                            <td>@user.Reservations.Count()</td>
                        </tr>
                    }
                }
                @if (!CountDescending)
                {
                    @foreach (var user in FilteredUsers.OrderBy(u => u.Reservations.Count()).ThenBy(u => u.UserName))
                    {
                        <tr>
                            <td>@user.Email</td>
                            <td>@user.Reservations.Count()</td>
                        </tr>
                    }
                }
                </tbody>
            </table>
        }
    </div>
</div>

@code {
    private List<Reservation> Reservations { get; set; } = new();
    private List<(int FloorNumber, List<int?> RoomNumbers)> activeFloors { get; set; } = new();
    private List<Data.Room> Rooms { get; set; } = new();
    private List<Data.Room> FilteredRooms { get; set; } = new();
    private List<(string Wing, int Count)> WingCounts { get; set; } = new();
    private List<(int FloorNumber, int Count)> FloorCounts { get; set; } = new();
    private List<User> Users { get; set; } = new();
    private List<User> FilteredUsers { get; set; } = new();

    private BarConfig _config;
    private BarConfig _floorReservationConfig;
    private BarConfig _wingReservationConfig;

    private string _selectedTable = "Rooms";

    private string SelectedTable
    {
        get => _selectedTable;
        set
        {
            if (_selectedTable != value)
            {
                _selectedTable = value;
                CountDescending = true;
            }
        }
    }

    private bool ShowFilterMenu { get; set; }
    private int? FilterFloorNumber { get; set; }
    private string FilterWing { get; set; }
    private int? FilterRoomNumber { get; set; }
    private bool CountDescending { get; set; } = true;
    private string UserSearchTerm { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _config = new BarConfig
        {
            Options = new BarOptions
            {
                Scales = new BarScales
                {
                    YAxes = new List<CartesianAxis>
                    {
                        new BarLinearCartesianAxis
                        {
                            Ticks = new LinearCartesianTicks
                            {
                                BeginAtZero = true,
                                StepSize = 1,
                            }
                        }
                    }
                },
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Reservations for today and tomorrow!"
                }
            }
        };

        _floorReservationConfig = new BarConfig
        {
            Options = new BarOptions
            {
                Scales = new BarScales
                {
                    YAxes = new List<CartesianAxis>
                    {
                        new BarLinearCartesianAxis
                        {
                            Ticks = new LinearCartesianTicks
                            {
                                BeginAtZero = true,
                                StepSize = 1,
                            }
                        }
                    }
                },
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Reservations for today and tomorrow by floor!"
                }
            }
        };

        _wingReservationConfig = new BarConfig
        {
            Options = new BarOptions
            {
                Scales = new BarScales
                {
                    YAxes = new List<CartesianAxis>
                    {
                        new BarLinearCartesianAxis
                        {
                            Ticks = new LinearCartesianTicks
                            {
                                BeginAtZero = true,
                                StepSize = 1,
                            }
                        }
                    }
                },
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Reservations for today and tomorrow by wing"
                }
            }
        };

        var today = DateTime.Now.Date;
        var tomorrow = today.AddDays(1);
        var now = DateTime.Now;

        Reservations = (await ReservationService.GetAllReservationsAsync())
            .Where(r => r.StartDate.Date >= today && r.StartDate.Date <= today.AddDays(1))
            .OrderBy(r => r.StartDate)
            .ToList();


        var activeReservations = (await ReservationService.GetAllReservationsAsync())
            .Where(r => r.StartDate.AddHours(2) <= now && r.EndDate.AddHours(2) >= now)
            .OrderBy(r => r.StartDate)
            .ToList();

        var tempActiveFloors = new List<(int FloorNumber, List<int?> RoomNumbers)>();

        foreach (var reservation in activeReservations)
        {
            var room = await RoomService.GetRoomByIdAsync(reservation.RoomId);
            if (room != null)
            {
                var existingFloor = tempActiveFloors.FirstOrDefault(f => f.FloorNumber == room.FloorNumber);
                if (existingFloor != default)
                {
                    existingFloor.RoomNumbers.Add(room.RoomNumber);
                }
                else
                {
                    tempActiveFloors.Add((room.FloorNumber, new List<int?> { room.RoomNumber }));
                }
            }
        }

        activeFloors = tempActiveFloors.Select(f => (f.FloorNumber, f.RoomNumbers.Distinct().ToList())).ToList();

        int[] reservationCounts = new int[2];
        for (int i = 0; i < 2; i++)
        {
            var targetDate = today.AddDays(i);
            reservationCounts[i] = Reservations.Count(r => r.StartDate.Date == targetDate);
        }

        var labels = new string[2];
        for (int i = 0; i < 2; i++)
        {
            labels[i] = today.AddDays(i).DayOfWeek.ToString();
        }

        foreach (var label in labels)
        {
            _config.Data.Labels.Add(label);
        }

        var dataset = new BarDataset<int>(reservationCounts)
        {
            Label = "Reservations",
            BackgroundColor = new[]
            {
                ColorUtil.ColorHexString(255, 99, 132),
                ColorUtil.ColorHexString(255, 99, 132),
            }
        };

        _config.Data.Datasets.Add(dataset);

        Rooms = (await RoomService.GetAllRoomsAsync()).ToList();
        FilteredRooms = new List<Data.Room>(Rooms);

        var floors = Rooms.Select(r => r.FloorNumber).Distinct().OrderBy(f => f).ToList();
        var wings = Rooms.Select(r => r.Wing).Distinct().OrderBy(f => f).ToList();

        var reservationCountsToday = new int[floors.Count];
        var reservationCountsTomorrow = new int[floors.Count];

        for (int i = 0; i < floors.Count; i++)
        {
            var floorNumber = floors[i];

            // Filter rooms for the current floor number
            var roomsOnFloor = Rooms.Where(r => r.FloorNumber == floorNumber).ToList();

            // Calculate reservation counts for today and tomorrow
            reservationCountsToday[i] = Reservations
                .Count(r => r.StartDate.Date == today && roomsOnFloor.Any(room => room.Id == r.RoomId));

            reservationCountsTomorrow[i] = Reservations
                .Count(r => r.StartDate.Date == tomorrow && roomsOnFloor.Any(room => room.Id == r.RoomId));
        }


        var floorLabels = floors.Select(f => $"Floor {f}").ToArray();

        foreach (var label in floorLabels)
        {
            _floorReservationConfig.Data.Labels.Add(label);
        }

        var datasetToday = new BarDataset<int>(reservationCountsToday)
        {
            Label = "Today",
            BackgroundColor = new[]
            {
                ColorUtil.ColorHexString(255, 99, 132)
            }
        };

        var datasetTomorrow = new BarDataset<int>(reservationCountsTomorrow)
        {
            Label = "Tomorrow",
            BackgroundColor = new[]
            {
                ColorUtil.ColorHexString(255, 99, 132)
            }
        };

        _floorReservationConfig.Data.Datasets.Add(datasetToday);
        _floorReservationConfig.Data.Datasets.Add(datasetTomorrow);

        var wingLabels = wings.Select(f => $"Wing {f}").ToArray();
        var reservationCountsTodayWing = new int[3];
        var reservationCountsTomorrowWing = new int[3];

        for (int i = 0; i < wings.Count; i++)
        {
            var wing = wings[i];

            // Filter rooms for the current floor number
            var roomsOnWing = Rooms.Where(r => r.Wing == wing).ToList();

            // Calculate reservation counts for today and tomorrow
            reservationCountsTodayWing[i] = Reservations
                .Count(r => r.StartDate.Date == today && roomsOnWing.Any(room => room.Id == r.RoomId));

            reservationCountsTomorrowWing[i] = Reservations
                .Count(r => r.StartDate.Date == tomorrow && roomsOnWing.Any(room => room.Id == r.RoomId));
        }

        foreach (var label in wingLabels)
        {
            _wingReservationConfig.Data.Labels.Add(label);
        }

        var datasetTodayWing = new BarDataset<int>(reservationCountsTodayWing)
        {
            Label = "Today",
            BackgroundColor = new[]
            {
                ColorUtil.ColorHexString(255, 99, 132)
            }
        };

        var datasetTomorrowWing = new BarDataset<int>(reservationCountsTomorrowWing)
        {
            Label = "Tomorrow",
            BackgroundColor = new[]
            {
                ColorUtil.ColorHexString(255, 99, 132)
            }
        };

        _wingReservationConfig.Data.Datasets.Add(datasetTodayWing);
        _wingReservationConfig.Data.Datasets.Add(datasetTomorrowWing);

        WingCounts = Rooms
            .GroupBy(r => r.Wing)
            .Select(group => (group.Key, group.Sum(r => r.Reservations.Count)))
            .ToList();


        FloorCounts = Rooms
            .GroupBy(r => r.FloorNumber)
            .Select(group => (group.Key, group.Sum(r => r.Reservations.Count)))
            .ToList();

        Users = (await UserManager.Users.Include(u => u.Reservations).ToListAsync()).OrderByDescending(u => u.Reservations.Count()).ToList();
        FilteredUsers = new List<User>(Users);
    }

    private void ToggleFilterMenu()
    {
        if (ShowFilterMenu) ShowFilterMenu = false;
        else if (!ShowFilterMenu) ShowFilterMenu = true;
    }

    private void ApplyFilters()
    {
        FilteredRooms = Rooms
            .Where(r => (!FilterFloorNumber.HasValue || r.FloorNumber == FilterFloorNumber.Value)
                        && (string.IsNullOrEmpty(FilterWing) || r.Wing.Equals(FilterWing, StringComparison.OrdinalIgnoreCase))
                        && (!FilterRoomNumber.HasValue || r.RoomNumber == FilterRoomNumber.Value))
            .OrderBy(r => r.FloorNumber)
            .ThenBy(r => r.RoomNumber)
            .ToList();
    }

    private void ClearFilters()
    {
        FilterFloorNumber = null;
        FilterWing = "";
        FilterRoomNumber = null;
        ApplyFilters();
    }

    private void ToggleCountOrder()
    {
        if (CountDescending) CountDescending = false;
        else if (!CountDescending) CountDescending = true;
    }

    private void ApplyUserFilter(ChangeEventArgs e)
    {
        UserSearchTerm = e.Value.ToString().ToLower();
        FilteredUsers = Users
            .Where(u => u.UserName.ToLower().StartsWith(UserSearchTerm))
            .OrderByDescending(u => u.Reservations.Count())
            .ToList();
    }

    private void ClearUserFilters()
    {
        UserSearchTerm = "";
        var changeEventArgs = new ChangeEventArgs { Value = "" };
        ApplyUserFilter(changeEventArgs);
    }

}