@page "/Manage/Room"
@using Microsoft.AspNetCore.Authorization
@using Common.Services
@using RoomService = Common.Services.RoomService
@inject RoomService RoomService

@attribute [Authorize(Roles = "Admin")]

<button @onclick="() => CurrentRoom = new Room()" class="btn btn-dark">New Room</button>
@if (CurrentRoom is not null)
{
    <EditForm Model="CurrentRoom" OnValidSubmit="HandleSubmit" class="position-fixed card p-3 shadow">
        <div class="mb-3 row g-3 align-items-center">
            <div class="col-auto">
                <label for="floor_number" class="col-form-label">Floor number:</label>
            </div>
            <div class="col-auto">
                <InputNumber @bind-Value="CurrentRoom!.FloorNumber" min="0" max="14" id="floor_number" class="form-control"/>
            </div>
        </div>
        <div class="mb-3 row g-3 align-items-center">
            <div class="col-auto">
                <label for="wing" class="col-form-label">Wing:</label>
            </div>
            <div class="col-auto">
                <InputSelect @bind-Value="CurrentRoom!.Wing" class="form-select" id="wing">
                    <option>Select an option</option>
                    <option value="A">A</option>
                    <option value="B">B</option>
                    <option value="C">C</option>
                </InputSelect>
            </div>
        </div>
        <div class="mb-3 row g-3 align-items-center">
            <div class="col-auto">
                <label for="room_number" class="col-form-label">Room number:</label>
            </div>
            <div class="col-auto">
                <InputNumber @bind-Value="CurrentRoom!.RoomNumber" class="form-control" id="room_number"/>
            </div>
        </div>
        <div class="mb-3 row g-3 align-items-center">
            <div class="col-auto">
                <label for="name" class="col-form-label">Name:</label>
            </div>
            <div class="col-auto">
                <InputText @bind-Value="CurrentRoom!.Name" class="form-control" id="name"/>
            </div>
        </div>
        <div class="mb-3 row g-3 align-items-center">
            <div class="col-auto">
                <label for="room_type" class="col-form-label">Room type:</label>
            </div>
            <div class="col-auto">
                <InputSelect @bind-Value="CurrentRoom!.Type" class="form-select" id="room_type">
                    <option selected hidden>Select an option</option>
                    <option value="Meeting">Meeting</option>
                    <option value="Workspace">Workspace</option>
                </InputSelect>
            </div>
        </div>
        <div class="row g-3 align-items-center">
            <div class="col-auto">
                <button type="submit" class="btn btn-success">Save</button>
            </div>
            <div class="col-auto">
        <button class="btn btn-outline-secondary" @onclick="() => CurrentRoom = null">Cancel</button>
            </div>
        </div>
    </EditForm>
}
@foreach (var floor in _rooms.Select(r => r.FloorNumber).Distinct().Order())
{
    <h3>Floor @floor</h3>
    <table class="table table-striped table-hover">
        <thead>
        <tr>
            <th>Availability</th>
            <th>Room Code</th>
            <th>Room Type</th>
            <th>Room Name</th>
            <th>Action</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var room in _rooms.Where(r => r.FloorNumber == floor))
        {
            <tr @onclick:preventDefault @onclick="() => SelectRoom(room)" style="cursor: pointer;">
                <td>@(room.IsAvailable(DateTime.Today, DateTime.Today.AddDays(1)) ? "Available" : "Occupied")</td>
                <td>@room.RoomCode</td>
                <td>@room.Type</td>
                <td>@room.Name</td>
                <td>
                    <button @onclick="() => DeleteRoom(room.Id)">Delete</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    [SupplyParameterFromForm] public Room? CurrentRoom { get; set; }

    private List<Room> _rooms { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        CurrentRoom = null;
        _rooms = (await RoomService.GetAllRoomsAsync()).OrderBy(r => r.RoomCode).ToList();
    }

    private void SelectRoom(Room room) => CurrentRoom = room;

    private async Task HandleSubmit()
    {
        if (CurrentRoom == null) return;
        if (await RoomService.UpdateRoomAsync(CurrentRoom) == null)
            await RoomService.CreateRoomAsync(CurrentRoom);
        await OnInitializedAsync();
    }

    private async Task DeleteRoom(Guid roomId)
    {
        await RoomService.DeleteRoomAsync(roomId);
        await OnInitializedAsync();
    }

}