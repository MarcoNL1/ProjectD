@page "/Rooms"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject RoomService RoomService
@inject ReservationService ReservationService
@inject NavigationManager NavigationManager
@inject UserManager<User> UserManager

<!-- Loop through each distinct floor and display the rooms in a table -->
@foreach (var floor in RoomList.Select(r => r.FloorNumber).Distinct().Order())
{
    <h3>Floor @floor</h3>
    <table class="table table-striped">
        <thead>
        <tr>
            <th>Availability</th>
            <th>Room Code</th>
            <th>Room Type</th>
            <th>Room Name</th>
            @if (!Viewing)
            {
                <th width="250px">Actions</th>
            }
        </tr>
        </thead>
        <tbody>
        @foreach (var room in RoomList.Where(r => r.FloorNumber == floor).OrderBy(r => r.Wing).ThenBy(r => r.RoomNumber))
        {
            <tr>
                <td>@(IsRoomAvailable(room) ? "Available" : "Occupied")</td>
                <td>@room.RoomCode</td>
                <td>@room.Type</td>
                <td>@room.Name</td>
                @if (!Viewing && !room.HasWorkspaces)
                {
                    <td>
                        <button type="button" class="btn btn-outline-success" @onclick="() => HandleReservation(room)">Reserve Workspace</button>
                    </td>
                }
            </tr>
            @code {
                bool open = false;
            }
            @if (room.Workspaces.Count > 0)
            {
                <tr>
                    <td colspan="100%">
                        <table class="table mb-0">
                            <thead>
                            <tr>
                                <th>Desk name</th>
                                <th></th>
                                <th></th>
                                <th></th>
                                @if (!Viewing)
                                {
                                    <th width="250px"></th>
                                }
                            </tr>
                            </thead>
                            <tbody>
                            @foreach (var workspace in room.Workspaces)
                            {
                                <tr>
                                    <td>@workspace.DeskName</td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    @if (!Viewing)
                                    {
                                        <td>
                                            <button type="button" class="btn btn-outline-success" @onclick="() => HandleReservation(workspace)">Reserve Workspace</button>
                                        </td>
                                    }
                                </tr>
                            }
                            </tbody>
                        </table>
                    </td>
                </tr>
            }
        }
        </tbody>
    </table>
}

@code {
    [SupplyParameterFromQuery] public string localStartDateTimeString { get; set; } = string.Empty;
    [SupplyParameterFromQuery] public string localEndDateTimeString { get; set; } = string.Empty;

    private AuthenticationState _authenticationState;
    private List<Room> RoomList { get; set; } = [];
    private List<Reservation> Reservations { get; set; } = [];
    private bool Viewing { get; set; }

    protected override async Task OnInitializedAsync()
    {
        RoomList = (await RoomService.GetAllRoomsAsync()).ToList();
        Reservations = (await ReservationService.GetAllReservationsAsync()).ToList();
        _authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        Viewing = string.IsNullOrEmpty(localStartDateTimeString) && string.IsNullOrEmpty(localEndDateTimeString);
    }

    private bool IsRoomAvailable(IBookable bookable)
    {
        if (!DateTime.TryParse(localStartDateTimeString, out var localStartDateTime) ||
            !DateTime.TryParse(localEndDateTimeString, out var localEndDateTime))
        {
            return false;
        }

        return Reservations.Where(r => r.RoomId == bookable.Id || r.WorkspaceId == bookable.Id).All(
            reservation => localStartDateTime >= reservation.EndDate
                           || localEndDateTime <= reservation.StartDate);
    }

    private async Task HandleReservation(IBookable bookable)
    {
        if (!DateTime.TryParse(localStartDateTimeString, out var localStartDateTime) ||
            !DateTime.TryParse(localEndDateTimeString, out var localEndDateTime))
        {
            // Handle invalid date input (optional)
            return;
        }

        var user = await UserManager.FindByNameAsync(_authenticationState.User.Identity?.Name);
        if (user == null) return;

        var reservation = new Reservation
        {
            UserId = Guid.Parse(user.Id).ToString(),
            Bookable = bookable,
            StartDate = TimeZoneInfo.ConvertTimeToUtc(localStartDateTime),
            EndDate = TimeZoneInfo.ConvertTimeToUtc(localEndDateTime)
        };

        await ReservationService.CreateReservationAsync(reservation);

        NavigationManager.NavigateTo("");
    }

}

